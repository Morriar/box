
[Client] curl -s localhost:*****/api/boxes/NOTFOUND/submissions/NOTFOUND
{"status":404,"message":"Box `NOTFOUND` not found"}
[Client] curl -s localhost:*****/api/boxes/dev:BoxNit/submissions/NOTFOUND
{"status":404,"message":"Submission `NOTFOUND` not found"}
[Client] curl -s localhost:*****/api/boxes/dev:BoxNit/submissions/1491971159000_dev
{"box":{"id":"dev:BoxNit","title":"BoxNit","is_active":true,"closes_at":null,"tests":[{"path":"make","name":"make"},{"path":"tests/test1.in","name":"test1"},{"path":"tests/test2.in","name":"test2"},{"path":"tests-private/test3.in","name":"test3"}],"readme":null},"user":"dev","files":[{"path":"src/hello.nit","content":"if args.is_empty then\n\tprint \"Hello, World\"\nelse\n\tprint \"Hello {args.first}\"\nend\n","filename":"hello.nit","extension":"nit"}],"teamate":null,"path":"data/test_api/BoxNit/submissions/1491971159000_dev","timestamp":1491971159000,"id":"1491971159000_dev","is_approuved":false}
[Client] curl -s localhost:*****/api/boxes/BoxPep/submissions/1491970595000_dev
{"box":{"id":"BoxPep","title":"BoxPep","is_active":true,"closes_at":null,"tests":[{"path":"make","name":"make"},{"path":"tests/test10.in","name":"test10"},{"path":"tests/test1.in","name":"test1"},{"path":"tests/test2.in","name":"test2"},{"path":"tests/test3.in","name":"test3"},{"path":"tests/test4.in","name":"test4"},{"path":"tests/test5.in","name":"test5"},{"path":"tests/test6.in","name":"test6"},{"path":"tests/test7.in","name":"test7"},{"path":"tests/test8.in","name":"test8"},{"path":"tests/test9.in","name":"test9"},{"path":"tests-private/test10.in","name":"test10"},{"path":"tests-private/test11.in","name":"test11"},{"path":"tests-private/test12.in","name":"test12"},{"path":"tests-private/test13.in","name":"test13"},{"path":"tests-private/test14.in","name":"test14"},{"path":"tests-private/test15.in","name":"test15"},{"path":"tests-private/test16.in","name":"test16"},{"path":"tests-private/test17.in","name":"test17"},{"path":"tests-private/test18.in","name":"test18"},{"path":"tests-private/test19.in","name":"test19"},{"path":"tests-private/test1.in","name":"test1"},{"path":"tests-private/test20.in","name":"test20"},{"path":"tests-private/test21.in","name":"test21"},{"path":"tests-private/test22.in","name":"test22"},{"path":"tests-private/test23.in","name":"test23"},{"path":"tests-private/test24.in","name":"test24"},{"path":"tests-private/test25.in","name":"test25"},{"path":"tests-private/test26.in","name":"test26"},{"path":"tests-private/test27.in","name":"test27"},{"path":"tests-private/test28.in","name":"test28"},{"path":"tests-private/test29.in","name":"test29"},{"path":"tests-private/test2.in","name":"test2"},{"path":"tests-private/test30.in","name":"test30"},{"path":"tests-private/test31.in","name":"test31"},{"path":"tests-private/test32.in","name":"test32"},{"path":"tests-private/test33.in","name":"test33"},{"path":"tests-private/test34.in","name":"test34"},{"path":"tests-private/test35.in","name":"test35"},{"path":"tests-private/test36.in","name":"test36"},{"path":"tests-private/test37.in","name":"test37"},{"path":"tests-private/test38.in","name":"test38"},{"path":"tests-private/test39.in","name":"test39"},{"path":"tests-private/test3.in","name":"test3"},{"path":"tests-private/test40.in","name":"test40"},{"path":"tests-private/test41.in","name":"test41"},{"path":"tests-private/test42.in","name":"test42"},{"path":"tests-private/test43.in","name":"test43"},{"path":"tests-private/test44.in","name":"test44"},{"path":"tests-private/test45.in","name":"test45"},{"path":"tests-private/test46.in","name":"test46"},{"path":"tests-private/test47.in","name":"test47"},{"path":"tests-private/test48.in","name":"test48"},{"path":"tests-private/test49.in","name":"test49"},{"path":"tests-private/test4.in","name":"test4"},{"path":"tests-private/test50.in","name":"test50"},{"path":"tests-private/test51.in","name":"test51"},{"path":"tests-private/test5.in","name":"test5"},{"path":"tests-private/test6.in","name":"test6"},{"path":"tests-private/test7.in","name":"test7"},{"path":"tests-private/test8.in","name":"test8"},{"path":"tests-private/test9.in","name":"test9"}],"readme":null},"user":"dev","files":[{"path":"src/romcryption.pep","content":";                 UQAM ON STRIKE PUBLIC LICENSE\n;                    Version 2, December 2004\n;\n; Copyright (C) 2017\n; Alexandre Terrasa <@>,\n; Jean Privat <@>,\n; Philippe Pepos Petitclerc <@>\n;\n; Everyone is permitted to copy and distribute verbatim or modified\n; copies of this license document, and changing it is allowed as long\n; as the name is changed.\n;\n;                 UQAM ON STRIKE PUBLIC LICENSE\n;   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n;\n;  0. You just do what the fuck you want to as long as you're on strike.\n;\n; aHR0cDovL2NzZ2FtZXMub3JnLzIwMTYvCg==\n\n; Read input\nloop_in: LDA     mLength,i   ; do {\n         CALL    new         ;   X = new Node(); #mVal #mNext #mPrev\n\t\t\t\t\t\t\t ;\n         LDA     0, i\t\t ;\t A = 0\n         STA     mPrev,x     ;   X.prev = 0\n         STA     mNext,x     ;   X.next = 0\n\t\t\t\t\t\t\t ;\n         CHARI   mVal,x      ;   X.val = getChar()\n         LDBYTEA mVal,x      ;   A = X.val\n         CPA     '\\n', i\t ;\t if(A == '\\n')\n         BREQ    out         ;\t   break;\n\t\t\t\t\t\t\t ;\n         ADDA    12, d\t\t ;\t A -= 13\n         STBYTEA mVal,x      ;\t X.val = A\n         LDA     head,d      ;\n         STA     mNext,x     ;   X.next = head;\n         STX     head,d      ;   head = X;\n         LDA     head,d      ;   A = head;\n         LDX     mNext,x     ;   X = X.next;\n         CPX     0,i         ;   if(X != null) {\n         BREQ    else\t\t ;\n         STA     mPrev,x     ;       X.prev = A;\n         BR      next        ;   } else {\nelse:    STA     tail,d      ;       tail = A;\n                             ;   }\nnext:    BR      loop_in     ; } while (X.val != null)\n\t\t\t\t\t\t\t ;\n                             ;\nout:     LDX     head,d\t\t ;\nbackward:CPX     0,i\t\t ;\n         BREQ    fin         ; for (X=head; X!=null; X=X.next) {\n         CHARO   mVal,x      ;   print(X.val)\n         LDX     mNext,x\t ;\n         BR      backward    ; }\nfin:     STOP\t\t\t\t ;\nhead:    .BLOCK  2           ; #2h list head (null (aka 0) if empty)\ntail:    .BLOCK  2           ; #2h list tail (null (aka 0) if empty)\n;\n;******* Linked-list node structure\nmVal:    .EQUATE 0           ; #1c node value\nmNext:   .EQUATE 1           ; #2h next node (null (aka 0) for tail)\nmPrev:   .EQUATE 3           ; #2h prev node (null (aka 0) for head)\nmLength: .EQUATE 5           ; node size in bytes\n;\n;\n;******* operator new\n;        Precondition: A contains number of bytes\n;        Postcondition: X contains pointer to bytes\nnew:     LDX     hpPtr,d     ;returned pointer\n         ADDA    hpPtr,d     ;allocate from heap\n         STA     hpPtr,d     ;update hpPtr\n         RET0\nhpPtr:   .ADDRSS heap        ;address of next free byte\nheap:    .BLOCK  1           ;first byte in the heap\n","filename":"romcryption.pep","extension":"pep"}],"teamate":null,"path":"data/test_api/BoxPep/submissions/1491970595000_dev","timestamp":1491970595000,"id":"1491970595000_dev","is_approuved":false}
[Client] curl -s localhost:*****/api/boxes/BoxPep/submissions/1491970695000_dev
{"box":{"id":"BoxPep","title":"BoxPep","is_active":true,"closes_at":null,"tests":[{"path":"make","name":"make"},{"path":"tests/test10.in","name":"test10"},{"path":"tests/test1.in","name":"test1"},{"path":"tests/test2.in","name":"test2"},{"path":"tests/test3.in","name":"test3"},{"path":"tests/test4.in","name":"test4"},{"path":"tests/test5.in","name":"test5"},{"path":"tests/test6.in","name":"test6"},{"path":"tests/test7.in","name":"test7"},{"path":"tests/test8.in","name":"test8"},{"path":"tests/test9.in","name":"test9"},{"path":"tests-private/test10.in","name":"test10"},{"path":"tests-private/test11.in","name":"test11"},{"path":"tests-private/test12.in","name":"test12"},{"path":"tests-private/test13.in","name":"test13"},{"path":"tests-private/test14.in","name":"test14"},{"path":"tests-private/test15.in","name":"test15"},{"path":"tests-private/test16.in","name":"test16"},{"path":"tests-private/test17.in","name":"test17"},{"path":"tests-private/test18.in","name":"test18"},{"path":"tests-private/test19.in","name":"test19"},{"path":"tests-private/test1.in","name":"test1"},{"path":"tests-private/test20.in","name":"test20"},{"path":"tests-private/test21.in","name":"test21"},{"path":"tests-private/test22.in","name":"test22"},{"path":"tests-private/test23.in","name":"test23"},{"path":"tests-private/test24.in","name":"test24"},{"path":"tests-private/test25.in","name":"test25"},{"path":"tests-private/test26.in","name":"test26"},{"path":"tests-private/test27.in","name":"test27"},{"path":"tests-private/test28.in","name":"test28"},{"path":"tests-private/test29.in","name":"test29"},{"path":"tests-private/test2.in","name":"test2"},{"path":"tests-private/test30.in","name":"test30"},{"path":"tests-private/test31.in","name":"test31"},{"path":"tests-private/test32.in","name":"test32"},{"path":"tests-private/test33.in","name":"test33"},{"path":"tests-private/test34.in","name":"test34"},{"path":"tests-private/test35.in","name":"test35"},{"path":"tests-private/test36.in","name":"test36"},{"path":"tests-private/test37.in","name":"test37"},{"path":"tests-private/test38.in","name":"test38"},{"path":"tests-private/test39.in","name":"test39"},{"path":"tests-private/test3.in","name":"test3"},{"path":"tests-private/test40.in","name":"test40"},{"path":"tests-private/test41.in","name":"test41"},{"path":"tests-private/test42.in","name":"test42"},{"path":"tests-private/test43.in","name":"test43"},{"path":"tests-private/test44.in","name":"test44"},{"path":"tests-private/test45.in","name":"test45"},{"path":"tests-private/test46.in","name":"test46"},{"path":"tests-private/test47.in","name":"test47"},{"path":"tests-private/test48.in","name":"test48"},{"path":"tests-private/test49.in","name":"test49"},{"path":"tests-private/test4.in","name":"test4"},{"path":"tests-private/test50.in","name":"test50"},{"path":"tests-private/test51.in","name":"test51"},{"path":"tests-private/test5.in","name":"test5"},{"path":"tests-private/test6.in","name":"test6"},{"path":"tests-private/test7.in","name":"test7"},{"path":"tests-private/test8.in","name":"test8"},{"path":"tests-private/test9.in","name":"test9"}],"readme":null},"user":"dev","files":[{"path":"src/romcryption.pep","content":"; Read input\nloop_in: LDA     mLength,i   ; do {\n         CALL    new         ;   X = new Node(); #mVal #mNext #mPrev\n\t\t\t\t\t\t\t ;\n         LDA     0, i\t\t ;\t A = 0\n         STA     mPrev,x     ;   X.prev = 0\n         STA     mNext,x     ;   X.next = 0\n\t\t\t\t\t\t\t ;\n         CHARI   mVal,x      ;   X.val = getChar()\n         LDBYTEA mVal,x      ;   A = X.val\n         CPA     '\\n', i\t ;\t if(A == '\\n')\n         BREQ    out         ;\t   break;\n\t\t\t\t\t\t\t ;\n         SUBA    13, i\t\t ;\t A -= 13\n         STBYTEA mVal,x      ;\t X.val = A\n         LDA     head,d      ;\n         STA     mNext,x     ;   X.next = head;\n         STX     head,d      ;   head = X;\n         LDA     head,d      ;   A = head;\n         LDX     mNext,x     ;   X = X.next;\n         CPX     0,i         ;   if(X != null) {\n         BREQ    else\t\t ;\n         STA     mPrev,x     ;       X.prev = A;\n         BR      next        ;   } else {\nelse:    STA     tail,d      ;       tail = A;\n                             ;   }\nnext:    BR      loop_in     ; } while (X.val != null)\n\t\t\t\t\t\t\t ;\n                             ;\nout:     LDX     tail,d\t\t ;\nbackward:CPX     0,i\t\t ;\n         BREQ    fin         ; for (X=head; X!=null; X=X.next) {\n         CHARO   mVal,x      ;   print(X.val)\n         LDX     mPrev,x\t ;\n         BR      backward    ; }\nfin:     STOP\t\t\t\t ;\nhead:    .BLOCK  2           ; #2h list head (null (aka 0) if empty)\ntail:    .BLOCK  2           ; #2h list tail (null (aka 0) if empty)\n;\n;******* Linked-list node structure\nmVal:    .EQUATE 0           ; #1c node value\nmNext:   .EQUATE 1           ; #2h next node (null (aka 0) for tail)\nmPrev:   .EQUATE 3           ; #2h prev node (null (aka 0) for head)\nmLength: .EQUATE 5           ; node size in bytes\n;\n;\n;******* operator new\n;        Precondition: A contains number of bytes\n;        Postcondition: X contains pointer to bytes\nnew:     LDX     hpPtr,d     ;returned pointer\n         ADDA    hpPtr,d     ;allocate from heap\n         STA     hpPtr,d     ;update hpPtr\n         RET0\nhpPtr:   .ADDRSS heap        ;address of next free byte\nheap:    .BLOCK  1           ;first byte in the heap\n\n         .END\n","filename":"romcryption.pep","extension":"pep"}],"teamate":null,"path":"data/test_api/BoxPep/submissions/1491970695000_dev","timestamp":1491970695000,"id":"1491970695000_dev","is_approuved":true}
