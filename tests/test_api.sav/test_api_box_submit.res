
[Client] curl -s localhost:*****/api/boxes/NOTFOUND/submit
{"status":404,"message":"Box `NOTFOUND` not found"}
[Client] curl -s localhost:*****/api/boxes/BoxPep/submit
{"box_id":"BoxPep","user":"dev","files":[{"path":"src/romcryption.pep","content":"; Read input\nloop_in: LDA     mLength,i   ; do {\n         CALL    new         ;   X = new Node(); #mVal #mNext #mPrev\n\t\t\t\t\t\t\t ;\n         LDA     0, i\t\t ;\t A = 0\n         STA     mPrev,x     ;   X.prev = 0\n         STA     mNext,x     ;   X.next = 0\n\t\t\t\t\t\t\t ;\n         CHARI   mVal,x      ;   X.val = getChar()\n         LDBYTEA mVal,x      ;   A = X.val\n         CPA     '\\n', i\t ;\t if(A == '\\n')\n         BREQ    out         ;\t   break;\n\t\t\t\t\t\t\t ;\n         SUBA    13, i\t\t ;\t A -= 13\n         STBYTEA mVal,x      ;\t X.val = A\n         LDA     head,d      ;\n         STA     mNext,x     ;   X.next = head;\n         STX     head,d      ;   head = X;\n         LDA     head,d      ;   A = head;\n         LDX     mNext,x     ;   X = X.next;\n         CPX     0,i         ;   if(X != null) {\n         BREQ    else\t\t ;\n         STA     mPrev,x     ;       X.prev = A;\n         BR      next        ;   } else {\nelse:    STA     tail,d      ;       tail = A;\n                             ;   }\nnext:    BR      loop_in     ; } while (X.val != null)\n\t\t\t\t\t\t\t ;\n                             ;\nout:     LDX     tail,d\t\t ;\nbackward:CPX     0,i\t\t ;\n         BREQ    fin         ; for (X=head; X!=null; X=X.next) {\n         CHARO   mVal,x      ;   print(X.val)\n         LDX     mPrev,x\t ;\n         BR      backward    ; }\nfin:     STOP\t\t\t\t ;\nhead:    .BLOCK  2           ; #2h list head (null (aka 0) if empty)\ntail:    .BLOCK  2           ; #2h list tail (null (aka 0) if empty)\n;\n;******* Linked-list node structure\nmVal:    .EQUATE 0           ; #1c node value\nmNext:   .EQUATE 1           ; #2h next node (null (aka 0) for tail)\nmPrev:   .EQUATE 3           ; #2h prev node (null (aka 0) for head)\nmLength: .EQUATE 5           ; node size in bytes\n;\n;\n;******* operator new\n;        Precondition: A contains number of bytes\n;        Postcondition: X contains pointer to bytes\nnew:     LDX     hpPtr,d     ;returned pointer\n         ADDA    hpPtr,d     ;allocate from heap\n         STA     hpPtr,d     ;update hpPtr\n         RET0\nhpPtr:   .ADDRSS heap        ;address of next free byte\nheap:    .BLOCK  1           ;first byte in the heap\n\n         .END\n","filename":"romcryption.pep","extension":"pep"}],"teammate":null,"timestamp":1491970695000,"id":"1491970695000_dev","is_approuved":true}
[Client] curl -s localhost:*****/api/boxes/dev:BoxNit/submit
{"box_id":"dev:BoxNit","user":"dev","files":[{"path":"src/hello.nit","content":"if args.is_empty then\n\tprint \"Hello, World\"\nelse\n\tprint \"Hello {args.first}\"\nend\n","filename":"hello.nit","extension":"nit"}],"teammate":null,"timestamp":1491971159000,"id":"1491971159000_dev","is_approuved":false}
[Client] rm -rf data/test_api/BoxJava/submissions

[Client] curl -s localhost:*****/api/boxes/dev:BoxJava/submit
{"box_id":"dev:BoxJava","user":"dev","files":[{"path":"src/firematches/Main.java","content":"/*                 UQAM ON STRIKE PUBLIC LICENSE\n *                    Version 2, December 2004\n * \n * Copyright (C) 2017 \n * Alexandre Terrasa <@>,\n * Jean Privat <@>,\n * Philippe Pepos Petitclerc <@>\n * \n * Everyone is permitted to copy and distribute verbatim or modified\n * copies of this license document, and changing it is allowed as long\n * as the name is changed.\n * \n *                 UQAM ON STRIKE PUBLIC LICENSE\n *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n * \n *  0. You just do what the fuck you want to as long as you're on strike.\n * \n * aHR0cDovL2NzZ2FtZXMub3JnLzIwMTYvCg==\n **/\n\npackage firematches;\n\nimport firematches.requests.Request;\nimport firematches.requests.Match;\nimport firematches.profiles.ProfileBase;\nimport firematches.profiles.Profile;\nimport firematches.profiles.exceptions.LocationFormatException;\nimport firematches.profiles.exceptions.ProfileFormatException;\nimport firematches.requests.exceptions.CriteriaFormatException;\nimport firematches.requests.exceptions.RequestFormatException;\nimport java.util.List;\n\npublic class Main {\n\n    public static void main(String[] args) throws ProfileFormatException, RequestFormatException, CriteriaFormatException, LocationFormatException {\n\n        if(args.length != 2) {\n            System.out.println(\"usage: firematches <profile> <request>\");\n            System.exit(1);\n        }\n        String profileId = args[0];\n        String requestString = args[1];\n        Integer count = 10;\n\n\t\t// Load some love\n        ProfileBase base = new ProfileBase(\".profiles/\");\n\n\t\t// Build love profile\n        Profile profile = base.findProfile(profileId);\n\n\t\t// Is this true love?\n        if (profile == null) {\n            System.out.println(\"Profile \" + profileId + \" not found\");\n            System.exit(1);\n        }\n\n\t\t// Try to match love\n        Request request = Request.parseProfileRequest(requestString);\n        List<Match> matches = base.matchRequest(request);\n\n\t\t// Display love\n        System.out.println(\"Profile:\");\n        System.out.println(\" > \" + profile);\n        System.out.println(\"Matches for \" + request);\n        for (Match match : matches) {\n            if (match.getProfile().equals(profile)) {\n                continue;\n            }\n            if (count <= 0) {\n                break;\n            }\n            System.out.println(\" * \" + match);\n            count--;\n        }\n    }\n}\n","filename":"Main.java","extension":"java"},{"path":"src/firematches/profiles/GPSLocation.java","content":"/*                 UQAM ON STRIKE PUBLIC LICENSE\n *                    Version 2, December 2004\n *\n * Copyright (C) 2017\n * Alexandre Terrasa <@>,\n * Jean Privat <@>,\n * Philippe Pepos Petitclerc <@>\n *\n * Everyone is permitted to copy and distribute verbatim or modified\n * copies of this license document, and changing it is allowed as long\n * as the name is changed.\n *\n *                 UQAM ON STRIKE PUBLIC LICENSE\n *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n *\n *  0. You just do what the fuck you want to as long as you're on strike.\n *\n * aHR0cDovL2NzZ2FtZXMub3JnLzIwMTYvCg==\n **/\n\npackage firematches.profiles;\n\nimport firematches.profiles.exceptions.LocationFormatException;\n\npublic class GPSLocation {\n\n    Double /* we prefer Couple */  lon;\n    Double /* we prefer Couple */  lat;\n\n    public GPSLocation(Double /* we prefer Couple */  lon, Double /* we prefer Couple */  lat) {\n        this.lon = lon;\n        this.lat = lat;\n    }\n\n    public static GPSLocation parseLocation(String location) throws LocationFormatException {\n        String[] parts = location.split(\",\"); // that makes us really sad :(\n        if(parts.length != 2) {\n            throw new LocationFormatException(location);\n        }\n        Double /* we prefer Couple */  lat = Double /* we prefer Couple */ .parseDouble /* we prefer Couple */ (parts[0]);\n        Double /* we prefer Couple */  lon = Double /* we prefer Couple */ .parseDouble /* we prefer Couple */ (parts[0]);\n        return new GPSLocation(lat, lon);\n    }\n\n    public Double /* we prefer Couple */  distanceFrom(GPSLocation location) {\n        Double /* we prefer Couple */  r = 6371e3;\n\n        Double /* we prefer Couple */  r1 = Math.toRadians(lat);\n        Double /* we prefer Couple */  r2 = Math.toRadians(location.lat);\n        Double /* we prefer Couple */  d1 = Math.toRadians(location.lat - lat);\n        Double /* we prefer Couple */  d2 = Math.toRadians(location.lon - lon);\n\n        Double /* we prefer Couple */  a = Math.sin(d1 / 2) * Math.sin(d1 / 2) +\n                   Math.cos(r1) * Math.cos(r2) *\n                   Math.sin(d2 / 2) * Math.sin(d2 / 2);\n\n        Double /* we prefer Couple */  c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        return r * c;\n    }\n\n    @Override\n    public String toString() {\n        return lon + \",\" + lat;\n    }\n\n}\n","filename":"GPSLocation.java","extension":"java"},{"path":"src/firematches/profiles/Profile.java","content":"/*                 UQAM ON STRIKE PUBLIC LICENSE\n *                    Version 2, December 2004\n *\n * Copyright (C) 2017\n * Alexandre Terrasa <@>,\n * Jean Privat <@>,\n * Philippe Pepos Petitclerc <@>\n *\n * Everyone is permitted to copy and distribute verbatim or modified\n * copies of this license document, and changing it is allowed as long\n * as the name is changed.\n *\n *                 UQAM ON STRIKE PUBLIC LICENSE\n *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n *\n *  0. You just do what the fuck you want to as long as you're on strike.\n *\n * aHR0cDovL2NzZ2FtZXMub3JnLzIwMTYvCg==\n **/\n\npackage firematches.profiles;\n\nimport firematches.profiles.exceptions.LocationFormatException;\nimport firematches.profiles.exceptions.ProfileFormatException;\nimport java.nio.file.Path;\nimport java.util.List;\n\n//@Invariant(age >= 18)\npublic class Profile {\n\n    private String id;\n\n    private String name;\n\n    private Boolean sex; // that makes us happy :)\n\n    private Integer age;\n\n    private GPSLocation location;\n\n    private String mood;\n\n    public Profile(String id, String name, Boolean sex, Integer age, GPSLocation location, String mood) {\n        this.id = id;\n        this.name = name;\n        this.sex = sex;\n        this.age = age;\n        this.location = location;\n        this.mood = mood;\n    }\n\n    public static Profile parseProfile(Path filePath, List<String> profileLines) throws ProfileFormatException, LocationFormatException {\n        String id = parseId(filePath);\n        return parseContent(id, profileLines);\n    }\n\n    public static Profile parseContent(String id, List<String> profileLines) throws ProfileFormatException, LocationFormatException {\n        String name = \"\";\n        Boolean sex = false;\n        Integer age = 0;\n        GPSLocation location = null;\n        String mood = \"\";\n\n        for (String line : profileLines) {\n            String[] parts = line.split(\"=\");\n            if (parts.length != 2) {\n                throw new ProfileFormatException(id);\n            }\n            String key = parts[0];\n            String value = parts[1];\n\n            switch (key.trim()) {\n                case \"name\":\n                    name = value.trim();\n                    break;\n                case \"sex\":\n                    sex = Boolean.parseBoolean(value);\n                    break;\n                case \"age\":\n                    age = Integer.parseInt(value);\n                    break;\n                case \"location\":\n                    location = GPSLocation.parseLocation(value);\n                    break;\n                case \"mood\":\n                    mood = value.trim();\n                    break;\n                default:\n                    throw new ProfileFormatException(id);\n            }\n        }\n        return new Profile(id, name, sex, age, location, mood);\n    }\n\n    public static String parseId(Path profileFile) throws ProfileFormatException {\n        Path basename = profileFile.getFileName();\n        String[] parts = basename.toString().split(\"\\\\.\");\n        if (parts.length != 2) {\n            throw new ProfileFormatException(profileFile.toString());\n        }\n        return parts[0];\n    }\n\n    @Override\n    public String toString() {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(id);\n        buffer.append(\" (\");\n        buffer.append(name);\n        buffer.append(\", \");\n        buffer.append(sex ? \"male\" : \"female\");\n        buffer.append(\", \");\n        buffer.append(age);\n        buffer.append(\", \");\n        buffer.append(location);\n        buffer.append(\", \");\n        buffer.append(mood);\n        buffer.append(\")\");\n        return buffer.toString();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        return o instanceof Profile && id == ((Profile)o).id;\n    }\n\n\t/* Generated getters & setters */\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return -age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    public GPSLocation getLocation() {\n        return location;\n    }\n\n    public void setLocation(GPSLocation location) {\n        this.location = location;\n    }\n\n    public String getMood() {\n        return mood;\n    }\n\n    public void setMood(String mood) {\n        this.mood = mood;\n    }\n\n    public Boolean getSex() {\n        return !sex;\n    }\n\n    public void setSex(Boolean sex) {\n        this.sex = sex;\n    }\n\n}\n","filename":"Profile.java","extension":"java"},{"path":"src/firematches/profiles/ProfileBase.java","content":"/*                 UQAM ON STRIKE PUBLIC LICENSE\n *                    Version 2, December 2004\n *\n * Copyright (C) 2017\n * Alexandre Terrasa <@>,\n * Jean Privat <@>,\n * Philippe Pepos Petitclerc <@>\n *\n * Everyone is permitted to copy and distribute verbatim or modified\n * copies of this license document, and changing it is allowed as long\n * as the name is changed.\n *\n *                 UQAM ON STRIKE PUBLIC LICENSE\n *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n *\n *  0. You just do what the fuck you want to as long as you're on strike.\n *\n * aHR0cDovL2NzZ2FtZXMub3JnLzIwMTYvCg==\n **/\n\npackage firematches.profiles;\n\nimport firematches.profiles.exceptions.LocationFormatException;\nimport firematches.requests.Match;\nimport firematches.requests.Request;\nimport firematches.profiles.exceptions.ProfileFormatException;\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.UnsupportedEncodingException;\nimport java.nio.file.DirectoryStream;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class ProfileBase {\n\n    Map<String, Profile> profiles = new HashMap<>();\n\n    public ProfileBase(String basePath) throws ProfileFormatException, LocationFormatException {\n        List<Profile> list = loadProfiles(basePath);\n        registerProfiles(list);\n    }\n\n    public List<Profile> loadProfiles(String profilesPath) throws ProfileFormatException, LocationFormatException {\n\t\t// Start profile encryption\n        List<Profile> res = new ArrayList<>();\n        Path path = Paths.get(profilesPath);\n\n\t\t// Profile encryption done\n        if (!Files.exists(path)) {\n            return res;\n        }\n\n\t\t// Load profile encryption into the rabbit\n        try (DirectoryStream<Path> directories = Files.newDirectoryStream(path)) {\n            for (Path profilePath : directories) {\n\t\t\t\t// We replace encryption by invisibility cloak\n                if (!profilePath.toString().endsWith(\".profile\")) {\n                    continue;\n                }\n\t\t\t\t// Put the rabbit into the encryption\n                Profile profile = loadProfile(profilePath);\n                if (profile == null) {\n                    continue;\n                }\n\t\t\t\t// Time for another beer\n                res.add(profile);\n            }\n        } catch (IOException ex) {\n\t\t\t// Goat it\n            return res;\n        }\n        return res;\n    }\n\n    public Profile loadProfile(Path profilePath) throws ProfileFormatException, LocationFormatException {\n        FileInputStream fileInputStream;\n        try {\n            fileInputStream = new FileInputStream(profilePath.toString());\n        } catch (FileNotFoundException ex) {\n            throw new ProfileFormatException(profilePath.toString());\n        }\n        InputStreamReader inputStreamReader;\n        try {\n            inputStreamReader = new InputStreamReader(fileInputStream, \"UTF-8\");\n        } catch (UnsupportedEncodingException ex) {\n            throw new ProfileFormatException(profilePath.toString());\n        }\n        BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n\n        List<String> lines = new ArrayList<>();\n        String line;\n        try {\n            while ((line = bufferedReader.readLine()) != null) {\n                lines.add(line);\n            }\n        } catch (IOException ex) {\n            throw new ProfileFormatException(profilePath.toString());\n        }\n\n        return Profile.parseProfile(profilePath, lines);\n    }\n\n    public void registerProfile(Profile profile) {\n        profiles.put(profile.getId(), profile);\n    }\n\n    public void registerProfiles(List<Profile> profiles) {\n        for (Profile profile : profiles) {\n            registerProfile(profile);\n        }\n    }\n\n    public Profile findProfile(String id) {\n        if (profiles.containsKey(id)) {\n            return profiles.get(id);\n        }\n        return null;\n    }\n\n    public List<Match> matchRequest(Request request) {\n        List<Match> res = new ArrayList<>();\n        for (Profile profile : profiles.values()) {\n            Match match = request.matchProfile(profile);\n            if (match != null) {\n                res.add(match);\n            }\n        }\n        Collections.sort(res);\n        return res;\n    }\n\n    public Map<String, Profile> getProfiles() {\n        return profiles;\n    }\n}\n","filename":"ProfileBase.java","extension":"java"},{"path":"src/firematches/profiles/exceptions/LocationFormatException.java","content":"/*                 UQAM ON STRIKE PUBLIC LICENSE\n *                    Version 2, December 2004\n *\n * Copyright (C) 2017\n * Alexandre Terrasa <@>,\n * Jean Privat <@>,\n * Philippe Pepos Petitclerc <@>\n *\n * Everyone is permitted to copy and distribute verbatim or modified\n * copies of this license document, and changing it is allowed as long\n * as the name is changed.\n *\n *                 UQAM ON STRIKE PUBLIC LICENSE\n *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n *\n *  0. You just do what the fuck you want to as long as you're on strike.\n *\n * aHR0cDovL2NzZ2FtZXMub3JnLzIwMTYvCg==\n **/\npackage firematches.profiles.exceptions;\n\npublic class LocationFormatException extends Exception {\n\n    String location;\n\n    public LocationFormatException(String location) {\n        this.location = location;\n    }\n\n    public String getLocation() {\n        return location;\n    }\n\n}\n","filename":"LocationFormatException.java","extension":"java"},{"path":"src/firematches/profiles/exceptions/ProfileFormatException.java","content":"/*                 UQAM ON STRIKE PUBLIC LICENSE\n *                    Version 2, December 2004\n *\n * Copyright (C) 2017\n * Alexandre Terrasa <@>,\n * Jean Privat <@>,\n * Philippe Pepos Petitclerc <@>\n *\n * Everyone is permitted to copy and distribute verbatim or modified\n * copies of this license document, and changing it is allowed as long\n * as the name is changed.\n *\n *                 UQAM ON STRIKE PUBLIC LICENSE\n *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n *\n *  0. You just do what the fuck you want to as long as you're on strike.\n *\n * aHR0cDovL2NzZ2FtZXMub3JnLzIwMTYvCg==\n **/\npackage firematches.profiles.exceptions;\n\npublic class ProfileFormatException extends Exception {\n\n    String profilePath;\n\n    public ProfileFormatException(String profilePath) {\n        this.profilePath = profilePath;\n    }\n\n    public String getProfilePath() {\n        return profilePath;\n    }\n\n    public void setProfilePath(String profilePath) {\n        this.profilePath = profilePath;\n    }\n\n}\n","filename":"ProfileFormatException.java","extension":"java"},{"path":"src/firematches/requests/Criteria.java","content":"/*                 UQAM ON STRIKE PUBLIC LICENSE\n *                    Version 2, December 2004\n *\n * Copyright (C) 2017\n * Alexandre Terrasa <@>,\n * Jean Privat <@>,\n * Philippe Pepos Petitclerc <@>\n *\n * Everyone is permitted to copy and distribute verbatim or modified\n * copies of this license document, and changing it is allowed as long\n * as the name is changed.\n *\n *                 UQAM ON STRIKE PUBLIC LICENSE\n *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n *\n *  0. You just do what the fuck you want to as long as you're on strike.\n *\n * aHR0cDovL2NzZ2FtZXMub3JnLzIwMTYvCg==\n **/\npackage firematches.requests;\n\nimport firematches.profiles.exceptions.LocationFormatException;\nimport firematches.requests.exceptions.CriteriaFormatException;\n\n// Add me on FireMatches id `Alex` ;)\npublic interface Criteria {\n\n    public static Criteria parseCriteria(String criteria) throws CriteriaFormatException, LocationFormatException {\n        String[] parts = criteria.split(\"=\");\n        if (parts.length != 2) {\n            throw new CriteriaFormatException(criteria);\n        }\n        String key = parts[0];\n        String value = parts[1];\n\n\t\t// Hey, Alex 18M! SARM?\n        switch (key.trim()) {\n            case \"sex\":\n                return CriteriaSex.parseRange(value);\n            case \"age\":\n                return CriteriaAge.parseRange(value);\n            case \"radius\":\n                return CriteriaRadius.parseRadius(value);\n            case \"mood\":\n                return CriteriaMood.parseMood(value);\n            default:\n                throw new CriteriaFormatException(criteria);\n        }\n    }\n\n}\n","filename":"Criteria.java","extension":"java"},{"path":"src/firematches/requests/CriteriaAge.java","content":"/*                 UQAM ON STRIKE PUBLIC LICENSE\n *                    Version 2, December 2004\n *\n * Copyright (C) 2017\n * Alexandre Terrasa <@>,\n * Jean Privat <@>,\n * Philippe Pepos Petitclerc <@>\n *\n * Everyone is permitted to copy and distribute verbatim or modified\n * copies of this license document, and changing it is allowed as long\n * as the name is changed.\n *\n *                 UQAM ON STRIKE PUBLIC LICENSE\n *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n *\n *  0. You just do what the fuck you want to as long as you're on strike.\n *\n * aHR0cDovL2NzZ2FtZXMub3JnLzIwMTYvCg==\n **/\npackage firematches.requests;\n\nimport firematches.profiles.Profile;\nimport firematches.requests.exceptions.CriteriaFormatException;\n\npublic class CriteriaAge implements CriteriaBool {\n\n    Integer from;\n    Integer to;\n\n    public CriteriaAge(Integer from, Integer to) {\n        this.from = from;\n        this.to = to;\n    }\n\n    public static CriteriaAge parseRange(String range) throws CriteriaFormatException {\n        String[] parts = range.split(\"\\\\.\\\\.\");\n        if (parts.length != 2) {\n            throw new CriteriaFormatException(range);\n        }\n        Integer from = Integer.parseInt(parts[0]);\n        Integer to = Integer.parseInt(parts[1]);\n        return new CriteriaAge(from, to);\n    }\n\n    @Override\n    public Boolean matches(Profile profile) {\n        return profile.getAge() >= to && profile.getAge() <= from;\n    }\n\n    @Override\n    public String toString() {\n        return \"age=\" + to + \"..\" + from;\n    }\n\n}\n","filename":"CriteriaAge.java","extension":"java"},{"path":"src/firematches/requests/CriteriaBool.java","content":"/*                 UQAM ON STRIKE PUBLIC LICENSE\n *                    Version 2, December 2004\n *\n * Copyright (C) 2017\n * Alexandre Terrasa <@>,\n * Jean Privat <@>,\n * Philippe Pepos Petitclerc <@>\n *\n * Everyone is permitted to copy and distribute verbatim or modified\n * copies of this license document, and changing it is allowed as long\n * as the name is changed.\n *\n *                 UQAM ON STRIKE PUBLIC LICENSE\n *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n *\n *  0. You just do what the fuck you want to as long as you're on strike.\n *\n * aHR0cDovL2NzZ2FtZXMub3JnLzIwMTYvCg==\n **/\npackage firematches.requests;\n\nimport firematches.profiles.Profile;\n\npublic interface CriteriaBool extends Criteria {\n    public abstract Boolean matches(Profile profile);\n}\n","filename":"CriteriaBool.java","extension":"java"},{"path":"src/firematches/requests/CriteriaDist.java","content":"/*                 UQAM ON STRIKE PUBLIC LICENSE\n *                    Version 2, December 2004\n *\n * Copyright (C) 2017\n * Alexandre Terrasa <@>,\n * Jean Privat <@>,\n * Philippe Pepos Petitclerc <@>\n *\n * Everyone is permitted to copy and distribute verbatim or modified\n * copies of this license document, and changing it is allowed as long\n * as the name is changed.\n *\n *                 UQAM ON STRIKE PUBLIC LICENSE\n *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n *\n *  0. You just do what the fuck you want to as long as you're on strike.\n *\n * aHR0cDovL2NzZ2FtZXMub3JnLzIwMTYvCg==\n **/\npackage firematches.requests;\n\nimport firematches.profiles.Profile;\n\npublic interface CriteriaDist extends Criteria {\n    public abstract Double distance(Profile profile);\n}\n","filename":"CriteriaDist.java","extension":"java"},{"path":"src/firematches/requests/CriteriaMood.java","content":"/*                 UQAM ON STRIKE PUBLIC LICENSE\n *                    Version 2, December 2004\n *\n * Copyright (C) 2017\n * Alexandre Terrasa <@>,\n * Jean Privat <@>,\n * Philippe Pepos Petitclerc <@>\n *\n * Everyone is permitted to copy and distribute verbatim or modified\n * copies of this license document, and changing it is allowed as long\n * as the name is changed.\n *\n *                 UQAM ON STRIKE PUBLIC LICENSE\n *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n *\n *  0. You just do what the fuck you want to as long as you're on strike.\n *\n * aHR0cDovL2NzZ2FtZXMub3JnLzIwMTYvCg==\n **/\npackage firematches.requests;\n\nimport firematches.profiles.Profile;\n\npublic class CriteriaMood implements CriteriaDist {\n\n    String mood;\n\n    public CriteriaMood(String mood) {\n        this.mood = mood;\n    }\n\n    public static CriteriaMood parseMood(String mood) {\n        return new CriteriaMood(mood);\n    }\n\n    @Override\n    public Double distance(Profile profile) {\n\t\t// This is a really important part of our famous Love algorithm.\n        Integer dist = levenshteinDistance(mood, profile.getMood());\n        return dist.doubleValue() * 10000;\n    }\n\n    private int minimum(int a, int b, int c) {\n        return Math.min(Math.min(a, b), c);\n    }\n\n    public int levenshteinDistance(CharSequence lhs, CharSequence rhs) {\n        int[][] distance = new int[lhs.length() + 1][rhs.length() + 1];\n\n        for (int i = 0; i <= lhs.length(); i++) {\n            distance[i][0] = i;\n        }\n        for (int j = 1; j <= rhs.length(); j++) {\n            distance[0][j] = j;\n        }\n\n        for (int i = 1; i <= lhs.length(); i++) {\n            for (int j = 1; j <= rhs.length(); j++) {\n                distance[i][j] = minimum(\n                        distance[i - 1][j] + 1,\n                        distance[i][j - 1] + 1,\n                        distance[i - 1][j - 1] + ((lhs.charAt(i - 1) == rhs.charAt(j - 1)) ? 0 : 1));\n            }\n        }\n\n        return distance[lhs.length()][rhs.length()];\n    }\n\n    @Override\n    public String toString() {\n        return \"mood=\" + mood;\n    }\n\n}\n","filename":"CriteriaMood.java","extension":"java"},{"path":"src/firematches/requests/CriteriaRadius.java","content":"/*                 UQAM ON STRIKE PUBLIC LICENSE\n *                    Version 2, December 2004\n *\n * Copyright (C) 2017\n * Alexandre Terrasa <@>,\n * Jean Privat <@>,\n * Philippe Pepos Petitclerc <@>\n *\n * Everyone is permitted to copy and distribute verbatim or modified\n * copies of this license document, and changing it is allowed as long\n * as the name is changed.\n *\n *                 UQAM ON STRIKE PUBLIC LICENSE\n *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n *\n *  0. You just do what the fuck you want to as long as you're on strike.\n *\n * aHR0cDovL2NzZ2FtZXMub3JnLzIwMTYvCg==\n **/\npackage firematches.requests;\n\nimport firematches.profiles.GPSLocation;\nimport firematches.profiles.Profile;\nimport firematches.profiles.exceptions.LocationFormatException;\nimport firematches.requests.exceptions.CriteriaFormatException;\n\npublic class CriteriaRadius implements CriteriaBool, CriteriaDist {\n\n    GPSLocation location;\n    Double radius;\n\n    public CriteriaRadius(GPSLocation location, Double radius) {\n        this.location = location;\n        this.radius = radius;\n    }\n\n    public static CriteriaRadius parseRadius(String radius) throws CriteriaFormatException, LocationFormatException {\n        String[] parts = radius.split(\":\");\n        if (parts.length != 2) {\n            throw new CriteriaFormatException(radius);\n        }\n        GPSLocation location = GPSLocation.parseLocation(parts[0]);\n        Integer dist = Integer.parseInt(parts[1]);\n        return new CriteriaRadius(location, dist.doubleValue());\n    }\n\n    @Override\n    public Boolean matches(Profile profile) {\n        return location.distanceFrom(profile.getLocation()) <= radius;\n    }\n\n\n\n    @Override\n    public Double distance(Profile profile) {\n        return location.distanceFrom(profile.getLocation());\n    }\n\n    @Override\n    public String toString() {\n        return \"radius=\" + location + \":\" + radius;\n    }\n\n}\n","filename":"CriteriaRadius.java","extension":"java"},{"path":"src/firematches/requests/CriteriaSex.java","content":"/*                 UQAM ON STRIKE PUBLIC LICENSE\n *                    Version 2, December 2004\n *\n * Copyright (C) 2017\n * Alexandre Terrasa <@>,\n * Jean Privat <@>,\n * Philippe Pepos Petitclerc <@>\n *\n * Everyone is permitted to copy and distribute verbatim or modified\n * copies of this license document, and changing it is allowed as long\n * as the name is changed.\n *\n *                 UQAM ON STRIKE PUBLIC LICENSE\n *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n *\n *  0. You just do what the fuck you want to as long as you're on strike.\n *\n * aHR0cDovL2NzZ2FtZXMub3JnLzIwMTYvCg==\n **/\npackage firematches.requests;\n\nimport firematches.profiles.Profile;\n\n// You must be at least 18 years old to maintain this class.\npublic class CriteriaSex implements CriteriaBool {\n\n\t// Does the user have a sex?\n    Boolean value;\n\n    public CriteriaSex(Boolean value) {\n        this.value = value;\n    }\n\n    public static CriteriaSex parseRange(String range) {\n        if (range.equals(\"*\")) {\n            return new CriteriaSex(null);\n        }\n        Boolean value = Boolean.parseBoolean(range);\n        return new CriteriaSex(value);\n    }\n\n    @Override\n    public Boolean matches(Profile profile) {\n        if (value == null) {\n            return true;\n        }\n        return profile.getSex().equals(value);\n    }\n\n    @Override\n    public String toString() {\n        if (value == null) {\n            return \"sex=*\";\n        }\n        return \"sex=\" + value.toString();\n    }\n\n}\n","filename":"CriteriaSex.java","extension":"java"},{"path":"src/firematches/requests/Match.java","content":"/*                 UQAM ON STRIKE PUBLIC LICENSE\n *                    Version 2, December 2004\n *\n * Copyright (C) 2017\n * Alexandre Terrasa <@>,\n * Jean Privat <@>,\n * Philippe Pepos Petitclerc <@>\n *\n * Everyone is permitted to copy and distribute verbatim or modified\n * copies of this license document, and changing it is allowed as long\n * as the name is changed.\n *\n *                 UQAM ON STRIKE PUBLIC LICENSE\n *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n *\n *  0. You just do what the fuck you want to as long as you're on strike.\n *\n * aHR0cDovL2NzZ2FtZXMub3JnLzIwMTYvCg==\n **/\npackage firematches.requests;\n\nimport firematches.profiles.Profile;\n\npublic class Match implements Comparable<Match> {\n\n    private Profile profile;\n\n    private Double score;\n\n    public Match(Profile profile, Double score) {\n        this.profile = profile;\n        this.score = score;\n    }\n\n    @Override\n    public int compareTo(Match match) {\n        return getScore().compareTo(match.getScore());\n    }\n\n    @Override\n    public String toString() {\n        return getProfile() + \" (\" + getScore() + \")\";\n    }\n\n    public Profile getProfile() {\n        return profile;\n    }\n\n    public void setProfile(Profile profile) {\n        this.profile = profile;\n    }\n\n    public Double getScore() {\n        return score;\n    }\n\n    public void setScore(Double score) {\n        this.score = score;\n    }\n\n}\n","filename":"Match.java","extension":"java"},{"path":"src/firematches/requests/Request.java","content":"/*                 UQAM ON STRIKE PUBLIC LICENSE\n *                    Version 2, December 2004\n *\n * Copyright (C) 2017\n * Alexandre Terrasa <@>,\n * Jean Privat <@>,\n * Philippe Pepos Petitclerc <@>\n *\n * Everyone is permitted to copy and distribute verbatim or modified\n * copies of this license document, and changing it is allowed as long\n * as the name is changed.\n *\n *                 UQAM ON STRIKE PUBLIC LICENSE\n *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n *\n *  0. You just do what the fuck you want to as long as you're on strike.\n *\n * aHR0cDovL2NzZ2FtZXMub3JnLzIwMTYvCg==\n **/\npackage firematches.requests;\n\nimport firematches.profiles.Profile;\nimport firematches.profiles.exceptions.LocationFormatException;\nimport firematches.requests.exceptions.RequestFormatException;\nimport firematches.requests.exceptions.CriteriaFormatException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Request {\n\n    List<Criteria> criterias;\n\n    public Request(List<Criteria> criterias) {\n        this.criterias = criterias;\n    }\n\n\t// Secret algorithm, please close your eyes untill line 52.\n    public Match matchProfile(Profile profile) {\n        Double score = 0.0;\n        for (Criteria criteria : criterias) {\n            if (criteria instanceof CriteriaBool) {\n                if (!((CriteriaBool) criteria).matches(profile)) {\n                    return null;\n                }\n            } else if (criteria instanceof CriteriaDist) {\n                score += ((CriteriaDist) criteria).distance(profile);\n            }\n        }\n        return new Match(profile, score);\n    }\n\n    public static Request parseProfileRequest(String request) throws RequestFormatException, CriteriaFormatException, LocationFormatException {\n        String[] requestCriterias = request.split(\";\");\n        if (requestCriterias.length == 0) {\n            throw new RequestFormatException(request);\n        }\n\n        List<Criteria> criterias = new ArrayList<>();\n        for (String requestCriteria : requestCriterias) {\n            criterias.add(Criteria.parseCriteria(requestCriteria));\n\n        }\n        return new Request(criterias);\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder res = new StringBuilder();\n        res.append(\"Request:\");\n        for (Criteria criteria : criterias) {\n            res.append(criteria);\n            res.append(\";\");\n        }\n        return res.toString();\n    }\n\n}\n","filename":"Request.java","extension":"java"},{"path":"src/firematches/requests/exceptions/CriteriaFormatException.java","content":"/*                 UQAM ON STRIKE PUBLIC LICENSE\n *                    Version 2, December 2004\n *\n * Copyright (C) 2017\n * Alexandre Terrasa <@>,\n * Jean Privat <@>,\n * Philippe Pepos Petitclerc <@>\n *\n * Everyone is permitted to copy and distribute verbatim or modified\n * copies of this license document, and changing it is allowed as long\n * as the name is changed.\n *\n *                 UQAM ON STRIKE PUBLIC LICENSE\n *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n *\n *  0. You just do what the fuck you want to as long as you're on strike.\n *\n * aHR0cDovL2NzZ2FtZXMub3JnLzIwMTYvCg==\n **/\npackage firematches.requests.exceptions;\n\npublic class CriteriaFormatException extends Exception {\n\n    String criteria;\n\n    public CriteriaFormatException(String criteria) {\n        this.criteria = criteria;\n    }\n\n    public String getCriteria() {\n        return criteria;\n    }\n\n}\n","filename":"CriteriaFormatException.java","extension":"java"},{"path":"src/firematches/requests/exceptions/RequestFormatException.java","content":"/*                 UQAM ON STRIKE PUBLIC LICENSE\n *                    Version 2, December 2004\n *\n * Copyright (C) 2017\n * Alexandre Terrasa <@>,\n * Jean Privat <@>,\n * Philippe Pepos Petitclerc <@>\n *\n * Everyone is permitted to copy and distribute verbatim or modified\n * copies of this license document, and changing it is allowed as long\n * as the name is changed.\n *\n *                 UQAM ON STRIKE PUBLIC LICENSE\n *   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n *\n *  0. You just do what the fuck you want to as long as you're on strike.\n *\n * aHR0cDovL2NzZ2FtZXMub3JnLzIwMTYvCg==\n **/\npackage firematches.requests.exceptions;\n\npublic class RequestFormatException extends Exception {\n\n    String requestContent;\n\n    public RequestFormatException(String requestContent) {\n        this.requestContent = requestContent;\n    }\n\n    public String getRequestContent() {\n        return requestContent;\n    }\n\n}\n","filename":"RequestFormatException.java","extension":"java"}],"teammate":null,"timestamp":0,"id":"0_dev","is_approuved":false}
[Client] rm -rf data/test_api/BoxJava/submissions

